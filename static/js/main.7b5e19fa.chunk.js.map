{"version":3,"sources":["App.module.css","Component/Search.js","Component/VideoDetail.js","Component/videoItem.js","Component/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","onSubmit","this","props","onSubmission","fontSize","Paper","elevation","Grid","container","spacing","item","xs","TextField","fullWidth","label","onChange","OnSearch","Component","VideoDetail","video","selectedVideo","videoUrl","id","videoId","Fragment","style","height","frameBorder","src","width","title","paddingTop","Typography","variant","snippet","channelTitle","description","VideoItem","display","alignItems","marginRight","alt","thumbnails","medium","url","VideoList","console","log","vidList","length","map","v","key","App","handleSubmit","event","a","preventDefault","axios","get","params","part","maxResults","q","state","searchText","result","setState","videoList","data","items","videoSelected","handleSearchText","target","value","justify","className","styles","mainContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b5e19fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"App_mainContainer__ZYHBV\"};","import React, { Component } from 'react';\r\nimport {Paper,TextField, Grid,Typography} from \"@material-ui/core\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport YouTubeIcon from '@material-ui/icons/YouTube';\r\nclass Search extends Component{    \r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.onSubmission}>\r\n                <YouTubeIcon fontSize=\"large\"/>\r\n                <Paper elevation={2}>\r\n                    <Grid container spacing={10}>\r\n                        <Grid item xs={10}>\r\n                        <TextField fullWidth label=\"Search\" onChange={this.props.OnSearch}/>\r\n                        </Grid>\r\n                        <Grid item xs={2}>\r\n                        <SearchIcon fontSize=\"large\"/>\r\n                        </Grid> \r\n                    </Grid>                                                 \r\n                </Paper>                \r\n            </form>\r\n        )\r\n    }\r\n    }      \r\nexport default Search;","import React, { Component } from 'react';\r\nimport {Paper, Typography} from \"@material-ui/core\";\r\n\r\nclass VideoDetail extends Component{\r\n    render(){\r\n        //console.log(this.props.selectedVideo);\r\n        const video = this.props.selectedVideo;\r\n        const videoUrl=`https://www.youtube.com/embed/${video.id.videoId}`;\r\n        //const videoTitle=\"Virat Kohli\";\r\n        return <React.Fragment>\r\n                <Paper elevation={6} style={{height:\"100%\"}}>\r\n            <iframe frameBorder=\"0\" src={videoUrl} height=\"100%\" width=\"100%\" title=\"video Player\"/>\r\n                </Paper>\r\n                <Paper elevation={6} style={{paddingTop:'20px'}}>\r\n                    <Typography variant=\"h6\">\r\n                        {video.snippet.title} - {video.snippet.channelTitle}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\">\r\n                    {video.snippet.channelTitle}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle2\">\r\n                    {video.snippet.description}\r\n                    </Typography>\r\n                </Paper>\r\n        </React.Fragment>        \r\n    }\r\n}\r\nexport default VideoDetail;","import React, { Component } from 'react';\r\nimport {Grid,Paper,Typography} from '@material-ui/core';\r\nclass VideoItem extends Component{\r\n    render(){\r\n        return <Grid item xs={12}>\r\n        <Paper style={{display:'flex',alignItems:'center'}}>\r\n            <img style={{marginRight:'20px'}} id={this.props.video.id.videoId}\r\n            alt=\"thumbnail\" \r\n            src={this.props.video.snippet.thumbnails.medium.url}/>\r\n            <Typography variant=\"subtitle1\">\r\n                {this.props.video.snippet.title}\r\n            </Typography>\r\n        </Paper>\r\n        </Grid>\r\n    }\r\n}\r\nexport default VideoItem;","import React, { Component } from 'react';\r\nimport VideoItem from './videoItem';\r\nclass VideoList extends Component{\r\n    render(){\r\n        console.log(this.props);\r\n        // const vList=this.props.vidList.filter((vid,id)=>{\r\n        //     if(id !== 0)\r\n        //     return false;\r\n        // });\r\n         return <React.Fragment>\r\n            {this.props.vidList.length ? this.props.vidList.map((v,id)=>{\r\n                return <VideoItem key={id} video={v}/>\r\n            }) : null}           \r\n        </React.Fragment>        \r\n    }\r\n}\r\nexport default VideoList;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport {Grid} from \"@material-ui/core\";\n//import logo from './logo.svg';\nimport styles from './App.module.css';\nimport Search from './Component/Search';\nimport VideoDetail from './Component/VideoDetail';\nimport VideoList from'./Component/VideoList';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      searchText:'',\n      videoList:[],\n      videoSelected:{}\n    }\n  }\n   handleSubmit=async(event)=>{\n    event.preventDefault();\n    const result= await axios.get('https://www.googleapis.com/youtube/v3/search',{params\n    :{\n      part:'snippet',\n      maxResults:5,\n      key:'AIzaSyDkm_ea1IgMSBhXk5tY6LSD_xjtLPbKFBA',\n      q:`${this.state.searchText}`\n    }});\n    console.log(result);\n    this.setState({\n      videoList: result.data.items,\n      videoSelected:result.data.items[0]\n    })\n  }\n  handleSearchText=(event)=>{    \n    this.setState({\n      searchText:event.target.value\n    })\n  }\n  render(){\n    console.log(this.state);\n    return <Grid justify=\"center\" container spacing={10}  className={styles.mainContainer}>      \n      <Grid item xs={12}>\n        <Grid container spacing={10}>\n          <Grid item xs={12}>\n          <Search OnSearch={this.handleSearchText} onSubmission={this.handleSubmit}/>\n          </Grid>\n          <Grid item xs={8}>\n            {\n              this.state.videoList.length ?  <VideoDetail selectedVideo={this.state.videoSelected}/> : null\n            }           \n          </Grid>\n          <Grid item xs={4}>\n            {\n              this.state.videoList.length ? <VideoList vidList={this.state.videoList}/> : null\n            }             \n          </Grid>\n        </Grid>\n      </Grid>                    \n    </Grid>\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}